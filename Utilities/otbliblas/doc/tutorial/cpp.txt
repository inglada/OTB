.. _cpptutorial:

*********************************************
C++ Tutorial
*********************************************

This basic tutorial explains how to use libLAS to read and write LIDAR data
encoded in LAS File Format. For more examples in C++, check source of `unit
tests package`_ for libLAS.


.. note::
    This tutorial needs to be extended with more detailed instructions and examples.

=============================================
Reading
=============================================

1. Include required header files from libLAS and C++ Standard Library

.. code-block:: cpp

 #include <liblas/laspoint.hpp>
 #include <liblas/lasreader.hpp>
 #include <fstream>  // std::ifstream
 #include <iostream> // std::cout

2. Create input stream and associate it with .las file opened to read in
   **binary** mode

.. code-block:: cpp

 std::ifstream ifs;
 ifs.open("file.las", std::ios::in | std::ios::binary);

3. Instantiate LAS file reader attached to the input stream object

.. code-block:: cpp

 liblas::LASReader reader(ifs);

4. After the reader has been created, you can access members of the Public
   Header Block

.. code-block:: cpp

    liblas::LASHeader const& header = reader.GetHeader();

    std::cout << "Signature: " << header.GetFileSignature() << '\n';
    std::cout << "Points count: " << header.GetPointRecordsCount() << '\n';

.. note::
    It's correct to assume that after successful instantiation of reader,
    public header block is automatically accessible. In other words, there
    never be a reader that can not serve a header data.

5. And, iterate through point records

.. code-block:: cpp

 while (reader.ReadNextPoint())
 {
    liblas::LASPoint const& p = reader.GetPoint();

    std::cout << p.GetX() << ", " << p.GetY() << ", " << p.GetZ() << "\n";
 }

=============================================
Writing
=============================================

1. Include required header files from libLAS and C++ Standard Library

.. code-block:: cpp

 #include <liblas/laspoint.hpp>
 #include <liblas/laswriter.hpp>
 #include <fstream>  // std::ifstream
 #include <iostream> // std::cout

2. Create output stream and associate it with .las file opened to write data
   in **binary** mode

.. code-block:: cpp

 std::ofstream ofs;
 ofs.open("file.las", ios::out | ios::binary);

3. Create instance of LASHeader class to define Public Header Block and set some values

.. code-block:: cpp

 liblas::LASHeader header;
 header.SetDataFormatId(LASHeader::ePointFormat1);
 // fill other header members



.. note:: 
    The default constructed header object can be used as perfectly valid
    header. It will define LAS file according to LAS 1.2 and Point Data Format
    0.

4. Create LAS file writer object attached to the output stream and the based
   on the header object.

.. code-block:: cpp

 liblas::LASWriter writer(ofs, header);
 // here the header has been serialized to disk into the *file.las*

5. Now, you can write some point records

.. code-block:: cpp

 liblas::LASPoint point;
 point.SetCoordinates(10, 20, 30);
 // fill other properties of point record

 writer.WritePoint(point);

Here, one point is written to the *file.las*.

=============================================
Copying .las file
=============================================

Below, two simple examples present how to rewrite content from one LAS file to
another, in two different ways.

--------------------------------------------------
Using interface of LASReader and LASWriter classes
--------------------------------------------------

.. code-block:: cpp

 #include <liblas/lasreader.hpp>
 #include <liblas/laswriter.hpp>
 #include <exception>
 #include <iostream>
 
 int main()
 {
    try
    {
       std::ifstream ifs("input.las", ios::in | ios::binary);
       std::ofstream ofs("output.las", ios::out | ios::binary);

       liblas::LASReader reader(ifs);
       liblas::LASWriter writer(ofs, reader.GetHeader());

       while (reader.ReadNextPoint())
       {
          writer.WritePoint(reader.GetPoint());
       }
    }
    catch (std::exception const& e)
    {
       std::cerr << "Error: " << e.what() << std::endl;
    }
 }

----------------------------------------------------
Using iterator classes defined for reader and writer
----------------------------------------------------

The library provides two `iterators <http://en.wikipedia.org/wiki/Iterator>`__
compatible with `iterator concept
<http://www.sgi.com/tech/stl/Iterators.html>`__ defined in `C++ Standard
Template Library <http://en.wikipedia.org/wiki/C%2B%2B_standard_library>`_:_

* lasreader_iterator - (`input iterator
  <http://www.sgi.com/tech/stl/InputIterator.html>`__) used to read data from
  LAS file attached to LASReader object
* laswriter_iterator - (`output iterator
  <http://www.sgi.com/tech/stl/OutputIterator.html>`__) used to write data into
  LAS file attached to LASWriter object.

.. code-block:: cpp

 #include <liblas/lasreader.hpp>
 #include <liblas/laswriter.hpp>
 #include <liblas/iterator.hpp>
 #include <algorithm>
 #include <exception>
 #include <iostream>
 using namespace liblas;

 int main()
 {
    try
    {
       std::ifstream ifs("input.las", ios::in | ios::binary);
       std::ofstream ofs("output.las", ios::out | ios::binary);

       LASReader reader(ifs);
       LASWriter writer(ofs, reader.GetHeader());

       std::copy(lasreader_iterator(reader),  lasreader_iterator(),
                 laswriter_iterator(writer));
    }
    catch (std::exception const& e)
    {
       std::cerr << "Error: " << e.what() << std::endl;
    }
 }

------------------------------------------------------------------------------
Applying filters to a reader to extract specified classes
------------------------------------------------------------------------------

The following example demonstrates how to use the built-in ClassificationFilter 
to filter for classes that match the specified values.  You can also provide 
your own filters by subclassing liblas::FilterI and providing a filter() 
function.  


.. note::
    Filters are applied in the order they are read from the vector that is
    given to the Reader/Writer in the SetFilters call.
 
.. code-block:: cpp

    #include <liblas/liblas.hpp>
    #include <liblas/laspoint.hpp>
    #include <liblas/lasreader.hpp>
    #include <liblas/laswriter.hpp>
    #include <liblas/lasfilter.hpp>
    #include <vector>
    #include <iostream>


    class LastReturnFilter: public liblas::FilterI
    {
    public:
    
        LastReturnFilter();
        bool filter(const liblas::Point& point);

    
    private:

        LastReturnFilter(LastReturnFilter const& other);
        LastReturnFilter& operator=(LastReturnFilter const& rhs);
    };


    LastReturnFilter::LastReturnFilter(  ) : 
     liblas::FilterI(eInclusion)
    {
    }



    bool LastReturnFilter::filter(const liblas::Point& p)
    {
    
        // If the GetReturnNumber equals the GetNumberOfReturns,
        // we're a last return
        bool output = false; 
        if (p.GetReturnNumber() == p.GetNumberOfReturns()) {
            output = true;
        } 

        // If the type is switched to eExclusion, we'll throw out all last returns.
        if (GetType() == eExclusion && output == true) {
            output = false;
        } else {
            output = true;
        }
        return output;
    }

    int main(int argc, char* argv[])
    {
        std::ifstream ifs;
    
        if (argc < 3) {
            std::cout <<std::string("not all arguments specified.  Usage: 'filter input.las output.las'") << std::endl;
            exit(1);        
        }
        std::string in_file(argv[1]);
        std::string out_file(argv[2]);
        if (!liblas::Open(ifs, in_file.c_str()))
        {
            std::cout <<std::string("Can not open \'") + in_file + "\'" << std::endl;;
            exit(1);
        }
        std::vector<liblas::uint8_t> classes;
        classes.push_back(2); // ground
        classes.push_back(9); // water
        classes.push_back(6); // building
    
        std::vector<liblas::FilterI*> filters;
        liblas::ClassificationFilter* class_filter = new liblas::ClassificationFilter(classes);
    
        // eInclusion means to keep the classes that match.  eExclusion would 
        // throw out those that matched
        class_filter->SetType(liblas::FilterI::eInclusion);
        filters.push_back(class_filter);    
    
        LastReturnFilter* return_filter = new LastReturnFilter();
        filters.push_back(return_filter);

        liblas::Reader reader(ifs);
        reader.SetFilters(&filters);

        std::ofstream ofs;
        if (!liblas::Create(ofs, out_file.c_str()))
        {
            std::cout <<std::string("Can not create \'") + out_file + "\'" << std::endl;;
            exit(1);
        }        
        liblas::Writer writer(ofs, reader.GetHeader());

        while (reader.ReadNextPoint())
        {
            liblas::Point const& p = reader.GetPoint(); 
            writer.WritePoint(p);  
        }
    
        delete class_filter;
        delete return_filter;
    }

.. _`unit tests package`: http://liblas.org/browser/trunk/test/unit
