.. _release_plan:

******************************************************************************
libLAS 1.6.0 Release Notes and Schedule
******************************************************************************


:Author: Howard Butler
:Contact: hobu.inc at gmail dot com
:Date: 7/27/2010

.. contents::
    :depth: 3
    :backlinks: none
    
Even though there has not been a major release of libLAS since April of 2009,
development has continued on the library. A number of new features, updates,
and bug fixes have been developed for the next libLAS release, to be called
`libLAS 1.6`. This section outlines some of the work that has (or will) gone
on.

Major features
------------------------------------------------------------------------------

The following are upcoming major features for libLAS 1.6.

Significant internal refactoring of C++ reading/writing code
..............................................................................

The C++ reader and writer code of libLAS was a bit inflexible, and contained
significant duplication. Giant updates would be required to the code as the
ASPRS LAS standard committee adds new versions of the
specification.  Additionally, the old code's design was a bit rigid for 
adding more generic things.

The reduction in duplication means going to only one place to make changes to 
the code.  In addition to not repeating ourselves, it provides us more 
flexibility to add new features and extensibility to allow the reader and 
writers to be overridden by user code.  

Rudimentary LAS 1.3 support
..............................................................................

Support for reading and writing LAS 1.3 *point* data is not provided in 
libLAS 1.6.  Support for reading point formats 4 or 5 is not yet complete, 
however.

Generic interfaces
..............................................................................

A number of generic interfaces have been added to libLAS to support dynamic
polymorphism. See <liblas/liblas.hpp> for the C++ interfaces. By implementing
these interfaces, you can add your own reader/writer implementations as well
as provide custom filtering and transformation capability.

Schema description support
..............................................................................

Though it is specifically allowed by the standard but not widely implemented,
it is possible to store extra data attached to each point after the requisite
PointFormat data are stored. There is neither a regularized way to describe
these data nor a way to capture metadata about this. To this end, I have
proposed an XML schema document that could be stored in a VLR as well as
schema-aware reader and writer implementations that can utilize that VLR to
work with the data. See <https://lidarbb.cr.usgs.gov/index.php?showtopic=9075>
for more details on the initial proposal of schema support.

Alternative formats
..............................................................................

Support for reading the TerraSolid bin format as well as writing the 
Oracle Point Cloud format will be provided for libLAS 1.6, but this code will
be moving to a new home shortly.  See `libPC`_ for more details on these 
developments

Generic spatial indexing
..............................................................................

A octree-based spatial index is being developed for libLAS to speed up random,
bounding-box-based queries to LAS files. It is expected that this will be
released as part of libLAS 1.6, but it is not yet complete. The index will be
able to be stored within VLRs (requires a file rewrite) in addition to in a
file alongside the .las file.

Migration to CMake
..............................................................................


libLAS has migrated to CMake to manage compilation. See `libLAS Compilation
<http://liblas.org/compilation.html>`__ for specific details how to use CMake
to build libLAS from source.

Minor features
------------------------------------------------------------------------------

Caching reader
..............................................................................

A reader implementation that provides data caching will be provided at 
libLAS 1.6. If your data reading involves reading the data in multiple passes 
through the file, you can utilize the cached reader to cache the points 
(up to the size of the entire file) for faster repeated and random access.  

Seek support
..............................................................................

It is now possible to seek to a specific point in the file and start reading 
points.  This can significantly speed up the "random sampling" access strategy 
where one starts reading a run of points at a specific location in the file 
and then moves to a different location.

Classification class
..............................................................................

A class is now provided to abstract the LAS classification value and help 
interpret the bit fields that are present for synthetic, key point, and withheld 
types.  

Vertical datum description support
..............................................................................

libLAS, in combination with a very recent GDAL/proj.4, can be used to preserve 
and describe the vertical datum GeoTIFF keys that are present in LAS files.

:ref:`lasblock`
..............................................................................

:ref:`lasblock` is a command-line utility for generating chips of LAS data 
that are as full as possible, square as possible, and made in a reasonable 
amount of time (chips at a rate of ~1 million points per second).

Release Schedule
------------------------------------------------------------------------------

We expect to have at least two beta release before the final release of libLAS 1.6. 

The following dates are approximate:

* Beta 1: 8/20/2010
* Beta 2: 9/10/2010
* 1.6.0: 9/30/2010

libPC
------------------------------------------------------------------------------

There exists a need in the LiDAR and laser scanning fields for a library much
like `GDAL`_ to provide translation to and from various formats. Further
development with libLAS has caused it to currently accrete support for reading
TerraSolid .bin files (:ref:`ts2las`) and write the `Oracle Point Cloud`_
(:ref:`las2oci`) format into Oracle databases. Additionally, there are a
multitude of other formats with similar characteristics that would be
excellent candidates for participating in a GDAL-like library for point cloud
data. These include:

* LAS
* `QFIT`_
* `Oracle Point Cloud`_
* `BAG`_
* Fixed schema CSV/text
* Variable schema CSV/text
* ...

To that end, I will be embarking on developing a new library in the style of 
GDAL to provide support for reading and writing (to varying levels of 
capability) these formats.  The plan is for it to be bootstrapped after the 
1.6 release of libLAS.

.. _`GDAL`: http://www.gdal.org
.. _`QFIT`: http://nsidc.org/data/ilatm1b.html
.. _`Oracle Point Cloud`: http://download.oracle.com/docs/cd/B28359_01/appdev.111/b28400/sdo_pc_pkg_ref.htm
.. _`BAG`: http://www.opennavsurf.org/papers/ons_fsd.pdf



