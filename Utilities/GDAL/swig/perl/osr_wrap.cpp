/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.26
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* ---------------------------------------------------------------------- -*- c -*-
 * perl5.swg
 *
 * Perl5 runtime library
 * $Header: /cvs/maptools/cvsroot/gdal/swig/perl/osr_wrap.cpp,v 1.2 2005/10/03 20:29:43 kruland Exp $
 * ----------------------------------------------------------------------------- */

#define SWIGPERL
#define SWIGPERL5
#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Get rid of free and malloc defined by perl */
#undef free
#undef malloc

#ifndef pTHX_
#define pTHX_
#endif

#include <string.h>
#ifdef __cplusplus
}
#endif

/* Macro to call an XS function */

#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

/* Contract support */

#define SWIG_contract_assert(expr,msg) if (!(expr)) { SWIG_croak(msg); } else

/* Note: SwigMagicFuncHack is a typedef used to get the C++ compiler to just shut up already */

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC
#else
#define MAGIC_PPERL
#define SWIGCLASS_STATIC static
#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(SV *, MAGIC *);

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif


#else
#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFuncHack)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

/* Modifications for newer Perl 5.005 releases */

#if !defined(PERL_REVISION) || ((PERL_REVISION >= 5) && ((PERL_VERSION < 5) || ((PERL_VERSION == 5) && (PERL_SUBVERSION < 50))))
#  ifndef PL_sv_yes
#    define PL_sv_yes sv_yes
#  endif
#  ifndef PL_sv_undef
#    define PL_sv_undef sv_undef
#  endif
#  ifndef PL_na
#    define PL_na na
#  endif
#endif

#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER 1
#define SWIG_SHADOW 2

/* Common SWIG API */

#ifdef PERL_OBJECT
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(pPerl, obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(pPerl, p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(pPerl, sv, p, s, type)
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(pPerl, obj, p, s, type, flags)

#else
#  define SWIG_ConvertPtr(obj, pp, type, flags) \
     SWIG_Perl_ConvertPtr(obj, pp, type, flags)
#  define SWIG_NewPointerObj(p, type, flags) \
     SWIG_Perl_NewPointerObj(p, type, flags)
#  define SWIG_MakePackedObj(sv, p, s, type)	\
     SWIG_Perl_MakePackedObj(sv, p, s, type )
#  define SWIG_ConvertPacked(obj, p, s, type, flags) \
     SWIG_Perl_ConvertPacked(obj, p, s, type, flags)
#endif

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Perl_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Perl_SetModule(pointer)

/* Perl-specific API */
#ifdef PERL_OBJECT
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(pPerl, sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(pPerl, str)
#else
#  define SWIG_MakePtr(sv, ptr, type, flags) \
     SWIG_Perl_MakePtr(sv, ptr, type, flags)
#  define SWIG_SetError(str) \
     SWIG_Perl_SetError(str)
#  define SWIG_SetErrorSV(str) \
     SWIG_Perl_SetErrorSV(str)
#endif

#define SWIG_SetErrorf SWIG_Perl_SetErrorf


#ifdef PERL_OBJECT
#  define SWIG_MAYBE_PERL_OBJECT CPerlObj *pPerl,
#else
#  define SWIG_MAYBE_PERL_OBJECT
#endif

static swig_cast_info *
SWIG_Perl_TypeCheckRV(SWIG_MAYBE_PERL_OBJECT SV *rv, swig_type_info *ty) {
  SWIG_TypeCheck_Template(sv_derived_from(rv, (char *) iter->type->name), ty);
}

/* Function for getting a pointer value */

static int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    SV *tsv = (SV*) SvRV(sv);
    IV tmp = 0;
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
            tmp = SvIV((SV*)SvRV(sv));
          }
        }
      } else {
        return -1;
      }
    } else {
      tmp = SvIV((SV*)SvRV(sv));
    }
    voidptr = (void *)tmp;
    if (!_t) {
      *(ptr) = voidptr;
      return 0;
    }
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return 0;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    *(ptr) = (void *) 0;
    if (!SvROK(sv))
      return 0;
    else
      return -1;
  } else {                            /* Don't know what it is */
    *(ptr) = (void *) 0;
    return -1;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeCheck(_c,_t);
    if (!tc) {
      *ptr = voidptr;
      return -1;
    }
    *ptr = SWIG_TypeCast(tc,voidptr);
    return 0;
  }
  *ptr = voidptr;
  return 0;
}

static void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & SWIG_SHADOW)) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, (char *) t->name, ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_OWNER) {
      HV *hv;
      GV *gv=*(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, (char *) t->name, ptr);
  }
}

static SWIGINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

static void
  SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  sv_setpv(sv, result);
}

/* Convert a packed value value */
static int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return -1;
  c = SvPV(obj, PL_na);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return -1;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return -1;
  }
  return 0;
}

static SWIGINLINE void
SWIG_Perl_SetError(SWIG_MAYBE_PERL_OBJECT const char *error) {
  if (error) sv_setpv(perl_get_sv("@", TRUE), error);
}

static SWIGINLINE void
SWIG_Perl_SetErrorSV(SWIG_MAYBE_PERL_OBJECT SV *error) {
  if (error) sv_setsv(perl_get_sv("@", TRUE), error);
}

static void
SWIG_Perl_SetErrorf(const char *fmt, ...) {
  va_list args;
  va_start(args, fmt);
  sv_vsetpvfn(perl_get_sv("@", TRUE), fmt, strlen(fmt), &args, Null(SV**), 0, Null(bool*));
  va_end(args);
}

/* Macros for low-level exception handling */
#define SWIG_fail       goto fail
#define SWIG_croak(x)   { SWIG_SetError(x); goto fail; }
#define SWIG_croakSV(x) { SWIG_SetErrorSV(x); goto fail; }
/* most preprocessors do not support vararg macros :-( */
/* #define SWIG_croakf(x...) { SWIG_SetErrorf(x); goto fail; } */


typedef XS(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;

#ifdef __cplusplus
}
#endif

/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
#define swig_create_magic(s,a,b,c) _swig_create_magic(s,a,b,c)
  #ifndef MULTIPLICITY
     static void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) {
  #else
     static void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) {
  #endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
static void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) {
#endif
  MAGIC *mg;
  sv_magic(sv,sv,'U',(char *) name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFuncHack) get;
  mg->mg_virtual->svt_set = (SwigMagicFuncHack) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


static swig_module_info *
SWIG_Perl_GetModule() {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

static void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef ENTER
  #undef ENTER
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef bool
  #undef bool
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_OSRCoordinateTransformationShadow swig_types[0]
#define SWIGTYPE_p_OSRSpatialReferenceShadow swig_types[1]
#define SWIGTYPE_p_double swig_types[2]
#define SWIGTYPE_p_int swig_types[3]
#define SWIGTYPE_p_long swig_types[4]
#define SWIGTYPE_p_p_char swig_types[5]
#define SWIGTYPE_p_p_double swig_types[6]
static swig_type_info *swig_types[8];
static swig_module_info swig_module = {swig_types, 7, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_osr

#define SWIG_name   "osrc::boot_osr"
#define SWIG_prefix "osrc::"

#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif


#include <iostream>
using namespace std;

#include "cpl_string.h"
#include "cpl_conv.h"

#include "ogr_srs_api.h"

typedef void OSRSpatialReferenceShadow;
typedef void OSRCoordinateTransformationShadow;



OGRErr GetWellKnownGeogCSAsWKT( const char *name, char **argout ) {
  OGRSpatialReferenceH srs = OSRNewSpatialReference("");
  OSRSetWellKnownGeogCS( srs, name );
  OGRErr rcode = OSRExportToWkt ( srs, argout );  
  OSRDestroySpatialReference( srs );
  return rcode;
}



static char const *
OGRErrMessages( int rc ) {
  switch( rc ) {
  case 0:
    return "OGR Error: None";
  case 1:
    return "OGR Error: Not enough data";
  case 2:
    return "OGR Error: Not enough memory";
  case 3:
    return "OGR Error: Unsupported geometry type";
  case 4:
    return "OGR Error: Unsupported operation";
  case 5:
    return "OGR Error: Corrupt data";
  case 6:
    return "OGR Error: General Error";
  case 7:
    return "OGR Error: Unsupported SRS";
  default:
    return "OGR Error: Unknown";
  }
}

static OSRSpatialReferenceShadow *new_OSRSpatialReferenceShadow(char const *wkt=""){
    OSRSpatialReferenceShadow *sr = (OSRSpatialReferenceShadow*) OSRNewSpatialReference(wkt);
    if (sr) {
      OSRReference( sr );
    }
    return sr;
  }
static void delete_OSRSpatialReferenceShadow(OSRSpatialReferenceShadow *self){
    if (OSRDereference( self ) == 0 ) {
      OSRDestroySpatialReference( self );
    }
  }
static char *OSRSpatialReferenceShadow___str__(OSRSpatialReferenceShadow *self){
    char *buf = 0;
    OSRExportToPrettyWkt( self, &buf, 0 );
    return buf;
  }
static int OSRSpatialReferenceShadow_IsSame(OSRSpatialReferenceShadow *self,OSRSpatialReferenceShadow *rhs){
    return OSRIsSame( self, rhs );
  }
static int OSRSpatialReferenceShadow_IsSameGeogCS(OSRSpatialReferenceShadow *self,OSRSpatialReferenceShadow *rhs){
    return OSRIsSameGeogCS( self, rhs );
  }
static int OSRSpatialReferenceShadow_IsGeographic(OSRSpatialReferenceShadow *self){
    return OSRIsGeographic(self);
  }
static int OSRSpatialReferenceShadow_IsProjected(OSRSpatialReferenceShadow *self){
    return OSRIsProjected(self);
  }
static char const *OSRSpatialReferenceShadow_GetAttrValue(OSRSpatialReferenceShadow *self,char const *name,int child=0){
    return OSRGetAttrValue( self, name, child );
  }
static OGRErr OSRSpatialReferenceShadow_SetAttrValue(OSRSpatialReferenceShadow *self,char const *name,char const *value){
    return OSRSetAttrValue( self, name, value ); 
  }
static OGRErr OSRSpatialReferenceShadow_SetAngularUnits(OSRSpatialReferenceShadow *self,char const *name,double to_radians){
    return OSRSetAngularUnits( self, name, to_radians );
  }
static double OSRSpatialReferenceShadow_GetAngularUnits(OSRSpatialReferenceShadow *self){
    // Return code ignored.
    return OSRGetAngularUnits( self, 0 );
  }
static OGRErr OSRSpatialReferenceShadow_SetLinearUnits(OSRSpatialReferenceShadow *self,char const *name,double to_meters){
    return OSRSetAngularUnits( self, name, to_meters );
  }
static double OSRSpatialReferenceShadow_GetLinearUnits(OSRSpatialReferenceShadow *self){
    // Return code ignored.
    return OSRGetLinearUnits( self, 0 );
  }
static char const *OSRSpatialReferenceShadow_GetLinearUnitsName(OSRSpatialReferenceShadow *self){
    const char *name = 0;
    if ( OSRIsProjected( self ) ) {
      name = OSRGetAttrValue( self, "PROJCS|UNIT", 0 );
    }
    else if ( OSRIsLocal( self ) ) {
      name = OSRGetAttrValue( self, "LOCAL_CS|UNIT", 0 );
    }

    if (name != 0) 
      return name;

    return "Meter";
  }
static char const *OSRSpatialReferenceShadow_GetAuthorityCode(OSRSpatialReferenceShadow *self,char const *target_key){
    return OSRGetAuthorityCode( self, target_key );
  }
static char const *OSRSpatialReferenceShadow_GetAuthorityName(OSRSpatialReferenceShadow *self,char const *target_key){
    return OSRGetAuthorityName( self, target_key );
  }
static OGRErr OSRSpatialReferenceShadow_SetUTM(OSRSpatialReferenceShadow *self,int zone,int north=1){
    return OSRSetUTM( self, zone, north );
  }
static OGRErr OSRSpatialReferenceShadow_SetStatePlane(OSRSpatialReferenceShadow *self,int zone,int is_nad83=1,char const *unitsname="",double units=0.0){
    return OSRSetStatePlaneWithUnits( self, zone, is_nad83, unitsname, units );
  }
static OGRErr OSRSpatialReferenceShadow_AutoIdentifyEPSG(OSRSpatialReferenceShadow *self){
    return OSRAutoIdentifyEPSG( self );
  }
static OGRErr OSRSpatialReferenceShadow_SetProjection(OSRSpatialReferenceShadow *self,char const *arg){
    return OSRSetProjection( self, arg );
  }
static OGRErr OSRSpatialReferenceShadow_SetProjParm(OSRSpatialReferenceShadow *self,char const *name,double val){
    return OSRSetProjParm( self, name, val ); 
  }
static double OSRSpatialReferenceShadow_GetProjParm(OSRSpatialReferenceShadow *self,char const *name,double default_val=0.0){
    // Return code ignored.
    return OSRGetProjParm( self, name, default_val, 0 );
  }
static OGRErr OSRSpatialReferenceShadow_SetNormProjParm(OSRSpatialReferenceShadow *self,char const *name,double val){
    return OSRSetNormProjParm( self, name, val );
  }
static double OSRSpatialReferenceShadow_GetNormProjParm(OSRSpatialReferenceShadow *self,char const *name,double default_val=0.0){
    // Return code ignored.
    return OSRGetNormProjParm( self, name, default_val, 0 );
  }
static OGRErr OSRSpatialReferenceShadow_SetACEA(OSRSpatialReferenceShadow *self,double stdp1,double stdp2,double clat,double clong,double fe,double fn){
    return OSRSetACEA( self, stdp1, stdp2, clat, clong, fe, fn );
  }
static OGRErr OSRSpatialReferenceShadow_SetAE(OSRSpatialReferenceShadow *self,double clat,double clon,double fe,double fn){
    return OSRSetAE( self, clat, clon, fe, fn );
  }
static OGRErr OSRSpatialReferenceShadow_SetCS(OSRSpatialReferenceShadow *self,double clat,double clong,double fe,double fn){
    return OSRSetCS( self, clat, clong, fe, fn );
  }
static OGRErr OSRSpatialReferenceShadow_SetBonne(OSRSpatialReferenceShadow *self,double clat,double clong,double fe,double fn){
    return OSRSetBonne( self, clat, clong, fe, fn );
  }
static OGRErr OSRSpatialReferenceShadow_SetEC(OSRSpatialReferenceShadow *self,double stdp1,double stdp2,double clat,double clong,double fe,double fn){
    return OSRSetEC( self, stdp1, stdp2, clat, clong, fe, fn );
  }
static OGRErr OSRSpatialReferenceShadow_SetEckertIV(OSRSpatialReferenceShadow *self,double cm,double fe,double fn){
    return OSRSetEckertIV( self, cm, fe, fn );
  }
static OGRErr OSRSpatialReferenceShadow_SetEckertVI(OSRSpatialReferenceShadow *self,double cm,double fe,double fn){
    return OSRSetEckertVI( self, cm, fe, fn );
  }
static OGRErr OSRSpatialReferenceShadow_SetEquirectangular(OSRSpatialReferenceShadow *self,double clat,double clong,double fe,double fn){
    return OSRSetEquirectangular( self, clat, clong, fe, fn );
  }
static OGRErr OSRSpatialReferenceShadow_SetGS(OSRSpatialReferenceShadow *self,double cm,double fe,double fn){
    return OSRSetGS( self, cm, fe, fn );
  }
static OGRErr OSRSpatialReferenceShadow_SetWellKnownGeogCS(OSRSpatialReferenceShadow *self,char const *name){
    return OSRSetWellKnownGeogCS( self, name );
  }
static OGRErr OSRSpatialReferenceShadow_SetFromUserInput(OSRSpatialReferenceShadow *self,char const *name){
    return OSRSetFromUserInput( self, name );
  }
static OGRErr OSRSpatialReferenceShadow_CopyGeogCSFrom(OSRSpatialReferenceShadow *self,OSRSpatialReferenceShadow *rhs){
    return OSRCopyGeogCSFrom( self, rhs );
  }
static OGRErr OSRSpatialReferenceShadow_SetTOWGS84(OSRSpatialReferenceShadow *self,double p1,double p2,double p3,double p4=0.0,double p5=0.0,double p6=0.0,double p7=0.0){
    return OSRSetTOWGS84( self, p1, p2, p3, p4, p5, p6, p7 );
  }

static SV *
CreateArrayFromDoubleArray( double *first, unsigned int size ) {
  AV *av = (AV*)sv_2mortal((SV*)newAV());
  for( unsigned int i=0; i<size; i++ ) {
    av_store(av,i,newSVnv(*first));
    ++first;
  }
  return newRV_noinc((SV*)av);
}

static OGRErr OSRSpatialReferenceShadow_GetTOWGS84(OSRSpatialReferenceShadow *self,double argout[7]){
    return OSRGetTOWGS84( self, argout, 7 );
  }
static OGRErr OSRSpatialReferenceShadow_SetGeogCS(OSRSpatialReferenceShadow *self,char const *pszGeogName,char const *pszDatumName,char const *pszEllipsoidName,double dfSemiMajor,double dfInvFlattening,char const *pszPMName="Greenwich",double dfPMOffset=0.0,char const *pszUnits="degree",double dfConvertToRadians=0.0174532925199433){
    return OSRSetGeogCS( self, pszGeogName, pszDatumName, pszEllipsoidName,
                         dfSemiMajor, dfInvFlattening,
                         pszPMName, dfPMOffset, pszUnits, dfConvertToRadians );
  }
static OGRErr OSRSpatialReferenceShadow_SetProjCS(OSRSpatialReferenceShadow *self,char const *name="unnamed"){
    return OSRSetProjCS( self, name );
  }
static OGRErr OSRSpatialReferenceShadow_ImportFromWkt(OSRSpatialReferenceShadow *self,char **ppszInput){
    return OSRImportFromWkt( self, ppszInput );
  }
static OGRErr OSRSpatialReferenceShadow_ImportFromProj4(OSRSpatialReferenceShadow *self,char *ppszInput){
    return OSRImportFromProj4( self, ppszInput );
  }
static OGRErr OSRSpatialReferenceShadow_ImportFromESRI(OSRSpatialReferenceShadow *self,char **ppszInput){
    return OSRImportFromESRI( self, ppszInput );
  }
static OGRErr OSRSpatialReferenceShadow_ImportFromEPSG(OSRSpatialReferenceShadow *self,int arg){
    return OSRImportFromEPSG(self, arg);
  }
static OGRErr OSRSpatialReferenceShadow_ImportFromPCI(OSRSpatialReferenceShadow *self,char const *proj,char const *units="METRE",double argin[17]=0){
    return OSRImportFromPCI( self, proj, units, argin );
  }
static OGRErr OSRSpatialReferenceShadow_ImportFromUSGS(OSRSpatialReferenceShadow *self,long proj_code,long zone=0,double argin[15]=0,long datum_code=0){
    return OSRImportFromUSGS( self, proj_code, zone, argin, datum_code );
  }
static OGRErr OSRSpatialReferenceShadow_ImportFromXML(OSRSpatialReferenceShadow *self,char const *xmlString){
    return OSRImportFromXML( self, xmlString );
  }
static OGRErr OSRSpatialReferenceShadow_ExportToWkt(OSRSpatialReferenceShadow *self,char **argout){
    return OSRExportToWkt( self, argout );
  }
static OGRErr OSRSpatialReferenceShadow_ExportToPrettyWkt(OSRSpatialReferenceShadow *self,char **argout,int simplify=0){
    return OSRExportToPrettyWkt( self, argout, simplify );
  }
static OGRErr OSRSpatialReferenceShadow_ExportToProj4(OSRSpatialReferenceShadow *self,char **argout){
    return OSRExportToProj4( self, argout );
  }
static OGRErr OSRSpatialReferenceShadow_ExportToPCI(OSRSpatialReferenceShadow *self,char **proj,char **units,double *parms[17]){
    return OSRExportToPCI( self, proj, units, parms );
  }
static OGRErr OSRSpatialReferenceShadow_ExportToUSGS(OSRSpatialReferenceShadow *self,long *code,long *zone,double *parms[15],long *datum){
    return OSRExportToUSGS( self, code, zone, parms, datum );
  }
static OGRErr OSRSpatialReferenceShadow_ExportToXML(OSRSpatialReferenceShadow *self,char **argout,char const *dialect=""){
    return OSRExportToXML( self, argout, dialect );
  }
static OSRSpatialReferenceShadow *OSRSpatialReferenceShadow_CloneGeogCS(OSRSpatialReferenceShadow *self){
    return (OSRSpatialReferenceShadow*) OSRCloneGeogCS(self);
  }
static OGRErr OSRSpatialReferenceShadow_Validate(OSRSpatialReferenceShadow *self){
    return OSRValidate(self);
  }
static OGRErr OSRSpatialReferenceShadow_StripCTParms(OSRSpatialReferenceShadow *self){
    return OSRStripCTParms(self);
  }
static OGRErr OSRSpatialReferenceShadow_FixupOrdering(OSRSpatialReferenceShadow *self){
    return OSRFixupOrdering(self);
  }
static OGRErr OSRSpatialReferenceShadow_Fixup(OSRSpatialReferenceShadow *self){
    return OSRFixup(self);
  }
static OGRErr OSRSpatialReferenceShadow_MorphToESRI(OSRSpatialReferenceShadow *self){
    return OSRMorphToESRI(self);
  }
static OGRErr OSRSpatialReferenceShadow_MorphFromESRI(OSRSpatialReferenceShadow *self){
    return OSRMorphFromESRI(self);
  }
static OSRCoordinateTransformationShadow *new_OSRCoordinateTransformationShadow(OSRSpatialReferenceShadow *src,OSRSpatialReferenceShadow *dst){
    OSRCoordinateTransformationShadow *obj = (OSRCoordinateTransformationShadow*) OCTNewCoordinateTransformation( src, dst );
    if (obj == 0 ) {
      throw "Failed to create coordinate transformation";
    }
    return obj;
  }
static void delete_OSRCoordinateTransformationShadow(OSRCoordinateTransformationShadow *self){
    OCTDestroyCoordinateTransformation( self );
  }
static void OSRCoordinateTransformationShadow_TransformPoint__SWIG_0(OSRCoordinateTransformationShadow *self,double inout[3]){
    OCTTransform( self, 1, &inout[0], &inout[1], &inout[2] );
  }
static void OSRCoordinateTransformationShadow_TransformPoint__SWIG_1(OSRCoordinateTransformationShadow *self,double argout[3],double x,double y,double z=0.0){
    argout[0] = x;
    argout[1] = y;
    argout[2] = z;
    OCTTransform( self, 1, &argout[0], &argout[1], &argout[2] );
  }
#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_osr_var::
class _wrap_osr_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *sv, MAGIC *mg) {
    MAGIC_PPERL
    sv = sv; mg = mg;
    croak("Value is read-only.");
    return 0;
}


#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_GetWellKnownGeogCSAsWKT) {
    {
        char *arg1 = (char *) 0 ;
        char **arg2 = (char **) 0 ;
        OGRErr result;
        char *argout2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        {
            /* %typemap(in,numinputs=0) (char **argout2) */
            arg2 = &argout2;
        }
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: GetWellKnownGeogCSAsWKT(name);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        result = (OGRErr)GetWellKnownGeogCSAsWKT((char const *)arg1,arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        {
            /* %typemap(argout) (char **argout) */
            ST(argvi) = sv_newmortal();
            if ( arg2 )
            sv_setpv(ST(argvi), *arg2);
            argvi++;
        }
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        XSRETURN(argvi);
        fail:
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_GetProjectionMethods) {
    {
        char **result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 0)) {
            SWIG_croak("Usage: GetProjectionMethods();");
        }
        result = (char **)OPTGetProjectionMethods();
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_p_char, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GetProjectionMethodParameterList) {
    {
        char *arg1 = (char *) 0 ;
        char **arg2 = (char **) 0 ;
        char **result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: GetProjectionMethodParameterList(method,username);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 2 of GetProjectionMethodParameterList. Expected _p_p_char");
            }
        }
        result = (char **)OPTGetParameterList(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_p_char, 0|0);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_GetProjectionMethodParamInfo) {
    {
        char *arg1 = (char *) 0 ;
        char *arg2 = (char *) 0 ;
        char **arg3 = (char **) 0 ;
        char **arg4 = (char **) 0 ;
        double *arg5 = (double *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: GetProjectionMethodParamInfo(method,param,usrname,type,defaultval);");
        }
        if (!SvOK((SV*) ST(0))) arg1 = 0;
        else arg1 = (char *) SvPV(ST(0), PL_na);
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        {
            if (SWIG_ConvertPtr(ST(2), (void **) &arg3, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 3 of GetProjectionMethodParamInfo. Expected _p_p_char");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(3), (void **) &arg4, SWIGTYPE_p_p_char,0) < 0) {
                SWIG_croak("Type error in argument 4 of GetProjectionMethodParamInfo. Expected _p_p_char");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(4), (void **) &arg5, SWIGTYPE_p_double,0) < 0) {
                SWIG_croak("Type error in argument 5 of GetProjectionMethodParamInfo. Expected _p_double");
            }
        }
        OPTGetParameterInfo(arg1,arg2,arg3,arg4,arg5);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_SpatialReference) {
    {
        char *arg1 = (char *) "" ;
        OSRSpatialReferenceShadow *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 0) || (items > 1)) {
            SWIG_croak("Usage: new_SpatialReference(wkt);");
        }
        if (items > 0) {
            if (!SvOK((SV*) ST(0))) arg1 = 0;
            else arg1 = (char *) SvPV(ST(0), PL_na);
        }
        result = (OSRSpatialReferenceShadow *)new_OSRSpatialReferenceShadow((char const *)arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_OSRSpatialReferenceShadow, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_SpatialReference) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_SpatialReference(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_SpatialReference. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        delete_OSRSpatialReferenceShadow(arg1);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference___str__) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference___str__(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference___str__. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (char *)OSRSpatialReferenceShadow___str__(arg1);
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        delete [] result;
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_IsSame) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_IsSame(self,rhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_IsSame. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 2 of SpatialReference_IsSame. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (int)OSRSpatialReferenceShadow_IsSame(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_IsSameGeogCS) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_IsSameGeogCS(self,rhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_IsSameGeogCS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 2 of SpatialReference_IsSameGeogCS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (int)OSRSpatialReferenceShadow_IsSameGeogCS(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_IsGeographic) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_IsGeographic(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_IsGeographic. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (int)OSRSpatialReferenceShadow_IsGeographic(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_IsProjected) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        int result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_IsProjected(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_IsProjected. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (int)OSRSpatialReferenceShadow_IsProjected(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setiv(ST(argvi++), (IV) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_GetAttrValue) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        int arg3 = (int) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: SpatialReference_GetAttrValue(self,name,child);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_GetAttrValue. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (items > 2) {
            arg3 = (int) SvIV(ST(2));
        }
        result = (char *)OSRSpatialReferenceShadow_GetAttrValue(arg1,(char const *)arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetAttrValue) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        char *arg3 = (char *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SpatialReference_SetAttrValue(self,name,value);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetAttrValue. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        result = (OGRErr)OSRSpatialReferenceShadow_SetAttrValue(arg1,(char const *)arg2,(char const *)arg3);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetAngularUnits) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        double arg3 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SpatialReference_SetAngularUnits(self,name,to_radians);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetAngularUnits. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (double) SvNV(ST(2));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetAngularUnits(arg1,(char const *)arg2,arg3);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_GetAngularUnits) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_GetAngularUnits(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_GetAngularUnits. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (double)OSRSpatialReferenceShadow_GetAngularUnits(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetLinearUnits) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        double arg3 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SpatialReference_SetLinearUnits(self,name,to_meters);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetLinearUnits. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (double) SvNV(ST(2));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetLinearUnits(arg1,(char const *)arg2,arg3);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_GetLinearUnits) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_GetLinearUnits(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_GetLinearUnits. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (double)OSRSpatialReferenceShadow_GetLinearUnits(arg1);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_GetLinearUnitsName) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_GetLinearUnitsName(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_GetLinearUnitsName. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (char *)OSRSpatialReferenceShadow_GetLinearUnitsName(arg1);
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_GetAuthorityCode) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_GetAuthorityCode(self,target_key);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_GetAuthorityCode. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (char *)OSRSpatialReferenceShadow_GetAuthorityCode(arg1,(char const *)arg2);
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_GetAuthorityName) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        char *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_GetAuthorityName(self,target_key);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_GetAuthorityName. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (char *)OSRSpatialReferenceShadow_GetAuthorityName(arg1,(char const *)arg2);
        
        ST(argvi) = sv_newmortal();
        if (result) {
            sv_setpv((SV*)ST(argvi++), (char *) result);
        } else {
            sv_setsv((SV*)ST(argvi++), &PL_sv_undef);
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetUTM) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        int arg2 ;
        int arg3 = (int) 1 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: SpatialReference_SetUTM(self,zone,north);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetUTM. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (int) SvIV(ST(1));
        if (items > 2) {
            arg3 = (int) SvIV(ST(2));
        }
        result = (OGRErr)OSRSpatialReferenceShadow_SetUTM(arg1,arg2,arg3);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetStatePlane) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        int arg2 ;
        int arg3 = (int) 1 ;
        char *arg4 = (char *) "" ;
        double arg5 = (double) 0.0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 5)) {
            SWIG_croak("Usage: SpatialReference_SetStatePlane(self,zone,is_nad83,unitsname,units);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetStatePlane. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (int) SvIV(ST(1));
        if (items > 2) {
            arg3 = (int) SvIV(ST(2));
        }
        if (items > 3) {
            if (!SvOK((SV*) ST(3))) arg4 = 0;
            else arg4 = (char *) SvPV(ST(3), PL_na);
        }
        if (items > 4) {
            arg5 = (double) SvNV(ST(4));
            
        }
        result = (OGRErr)OSRSpatialReferenceShadow_SetStatePlane(arg1,arg2,arg3,(char const *)arg4,arg5);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_AutoIdentifyEPSG) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_AutoIdentifyEPSG(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_AutoIdentifyEPSG. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_AutoIdentifyEPSG(arg1);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetProjection) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_SetProjection(self,arg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetProjection. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (OGRErr)OSRSpatialReferenceShadow_SetProjection(arg1,(char const *)arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetProjParm) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        double arg3 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SpatialReference_SetProjParm(self,name,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetProjParm. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (double) SvNV(ST(2));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetProjParm(arg1,(char const *)arg2,arg3);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_GetProjParm) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        double arg3 = (double) 0.0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: SpatialReference_GetProjParm(self,name,default_val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_GetProjParm. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (items > 2) {
            arg3 = (double) SvNV(ST(2));
            
        }
        result = (double)OSRSpatialReferenceShadow_GetProjParm(arg1,(char const *)arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetNormProjParm) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        double arg3 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 3) || (items > 3)) {
            SWIG_croak("Usage: SpatialReference_SetNormProjParm(self,name,val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetNormProjParm. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        arg3 = (double) SvNV(ST(2));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetNormProjParm(arg1,(char const *)arg2,arg3);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_GetNormProjParm) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        double arg3 = (double) 0.0 ;
        double result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 3)) {
            SWIG_croak("Usage: SpatialReference_GetNormProjParm(self,name,default_val);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_GetNormProjParm. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (items > 2) {
            arg3 = (double) SvNV(ST(2));
            
        }
        result = (double)OSRSpatialReferenceShadow_GetNormProjParm(arg1,(char const *)arg2,arg3);
        
        ST(argvi) = sv_newmortal();
        sv_setnv(ST(argvi++), (double) result);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetACEA) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        double arg5 ;
        double arg6 ;
        double arg7 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: SpatialReference_SetACEA(self,stdp1,stdp2,clat,clong,fe,fn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetACEA. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        arg5 = (double) SvNV(ST(4));
        
        arg6 = (double) SvNV(ST(5));
        
        arg7 = (double) SvNV(ST(6));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetACEA(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetAE) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        double arg5 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: SpatialReference_SetAE(self,clat,clon,fe,fn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetAE. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        arg5 = (double) SvNV(ST(4));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetAE(arg1,arg2,arg3,arg4,arg5);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetCS) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        double arg5 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: SpatialReference_SetCS(self,clat,clong,fe,fn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetCS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        arg5 = (double) SvNV(ST(4));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetCS(arg1,arg2,arg3,arg4,arg5);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetBonne) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        double arg5 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: SpatialReference_SetBonne(self,clat,clong,fe,fn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetBonne. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        arg5 = (double) SvNV(ST(4));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetBonne(arg1,arg2,arg3,arg4,arg5);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetEC) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        double arg5 ;
        double arg6 ;
        double arg7 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 7) || (items > 7)) {
            SWIG_croak("Usage: SpatialReference_SetEC(self,stdp1,stdp2,clat,clong,fe,fn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetEC. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        arg5 = (double) SvNV(ST(4));
        
        arg6 = (double) SvNV(ST(5));
        
        arg7 = (double) SvNV(ST(6));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetEC(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetEckertIV) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: SpatialReference_SetEckertIV(self,cm,fe,fn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetEckertIV. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetEckertIV(arg1,arg2,arg3,arg4);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetEckertVI) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: SpatialReference_SetEckertVI(self,cm,fe,fn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetEckertVI. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetEckertVI(arg1,arg2,arg3,arg4);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetEquirectangular) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        double arg5 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 5) || (items > 5)) {
            SWIG_croak("Usage: SpatialReference_SetEquirectangular(self,clat,clong,fe,fn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetEquirectangular. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        arg5 = (double) SvNV(ST(4));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetEquirectangular(arg1,arg2,arg3,arg4,arg5);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetGS) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 4)) {
            SWIG_croak("Usage: SpatialReference_SetGS(self,cm,fe,fn);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetGS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        result = (OGRErr)OSRSpatialReferenceShadow_SetGS(arg1,arg2,arg3,arg4);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetWellKnownGeogCS) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_SetWellKnownGeogCS(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetWellKnownGeogCS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (OGRErr)OSRSpatialReferenceShadow_SetWellKnownGeogCS(arg1,(char const *)arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetFromUserInput) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_SetFromUserInput(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetFromUserInput. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (OGRErr)OSRSpatialReferenceShadow_SetFromUserInput(arg1,(char const *)arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_CopyGeogCSFrom) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_CopyGeogCSFrom(self,rhs);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_CopyGeogCSFrom. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 2 of SpatialReference_CopyGeogCSFrom. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_CopyGeogCSFrom(arg1,arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetTOWGS84) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double arg2 ;
        double arg3 ;
        double arg4 ;
        double arg5 = (double) 0.0 ;
        double arg6 = (double) 0.0 ;
        double arg7 = (double) 0.0 ;
        double arg8 = (double) 0.0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 4) || (items > 8)) {
            SWIG_croak("Usage: SpatialReference_SetTOWGS84(self,p1,p2,p3,p4,p5,p6,p7);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetTOWGS84. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (double) SvNV(ST(1));
        
        arg3 = (double) SvNV(ST(2));
        
        arg4 = (double) SvNV(ST(3));
        
        if (items > 4) {
            arg5 = (double) SvNV(ST(4));
            
        }
        if (items > 5) {
            arg6 = (double) SvNV(ST(5));
            
        }
        if (items > 6) {
            arg7 = (double) SvNV(ST(6));
            
        }
        if (items > 7) {
            arg8 = (double) SvNV(ST(7));
            
        }
        result = (OGRErr)OSRSpatialReferenceShadow_SetTOWGS84(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_GetTOWGS84) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        double *arg2 ;
        OGRErr result;
        double argout2[7] ;
        int argvi = 0;
        dXSARGS;
        
        {
            /* %typemap(in,numinputs=0) (double argout2[ANY]) */
            arg2 = argout2;
        }
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_GetTOWGS84(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_GetTOWGS84. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_GetTOWGS84(arg1,arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        {
            /* %typemap(argout) (double argout[ANY]) */
            ST(argvi) = CreateArrayFromDoubleArray( arg2, 7 );
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetGeogCS) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        char *arg3 = (char *) 0 ;
        char *arg4 = (char *) 0 ;
        double arg5 ;
        double arg6 ;
        char *arg7 = (char *) "Greenwich" ;
        double arg8 = (double) 0.0 ;
        char *arg9 = (char *) "degree" ;
        double arg10 = (double) 0.0174532925199433 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 6) || (items > 10)) {
            SWIG_croak("Usage: SpatialReference_SetGeogCS(self,pszGeogName,pszDatumName,pszEllipsoidName,dfSemiMajor,dfInvFlattening,pszPMName,dfPMOffset,pszUnits,dfConvertToRadians);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetGeogCS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (!SvOK((SV*) ST(2))) arg3 = 0;
        else arg3 = (char *) SvPV(ST(2), PL_na);
        if (!SvOK((SV*) ST(3))) arg4 = 0;
        else arg4 = (char *) SvPV(ST(3), PL_na);
        arg5 = (double) SvNV(ST(4));
        
        arg6 = (double) SvNV(ST(5));
        
        if (items > 6) {
            if (!SvOK((SV*) ST(6))) arg7 = 0;
            else arg7 = (char *) SvPV(ST(6), PL_na);
        }
        if (items > 7) {
            arg8 = (double) SvNV(ST(7));
            
        }
        if (items > 8) {
            if (!SvOK((SV*) ST(8))) arg9 = 0;
            else arg9 = (char *) SvPV(ST(8), PL_na);
        }
        if (items > 9) {
            arg10 = (double) SvNV(ST(9));
            
        }
        result = (OGRErr)OSRSpatialReferenceShadow_SetGeogCS(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,(char const *)arg7,arg8,(char const *)arg9,arg10);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_SetProjCS) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) "unnamed" ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_SetProjCS(self,name);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_SetProjCS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (items > 1) {
            if (!SvOK((SV*) ST(1))) arg2 = 0;
            else arg2 = (char *) SvPV(ST(1), PL_na);
        }
        result = (OGRErr)OSRSpatialReferenceShadow_SetProjCS(arg1,(char const *)arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ImportFromWkt) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char **arg2 = (char **) 0 ;
        OGRErr result;
        char *val2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_ImportFromWkt(self,ppszInput);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ImportFromWkt. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        {
            /* %typemap(in) (char **ignorechange) */
            val2 = SvPV_nolen(ST(1));
            arg2 = &val2;
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ImportFromWkt(arg1,arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ImportFromProj4) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_ImportFromProj4(self,ppszInput);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ImportFromProj4. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (OGRErr)OSRSpatialReferenceShadow_ImportFromProj4(arg1,arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ImportFromESRI) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char **arg2 = (char **) 0 ;
        OGRErr result;
        char *val2 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_ImportFromESRI(self,ppszInput);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ImportFromESRI. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        {
            /* %typemap(in) (char **ignorechange) */
            val2 = SvPV_nolen(ST(1));
            arg2 = &val2;
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ImportFromESRI(arg1,arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ImportFromEPSG) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        int arg2 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_ImportFromEPSG(self,arg);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ImportFromEPSG. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (int) SvIV(ST(1));
        result = (OGRErr)OSRSpatialReferenceShadow_ImportFromEPSG(arg1,arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ImportFromPCI) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        char *arg3 = (char *) "METRE" ;
        double *arg4 = (double *) (double *)0 ;
        OGRErr result;
        double argin4[17] ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 4)) {
            SWIG_croak("Usage: SpatialReference_ImportFromPCI(self,proj,units,argin);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ImportFromPCI. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        if (items > 2) {
            if (!SvOK((SV*) ST(2))) arg3 = 0;
            else arg3 = (char *) SvPV(ST(2), PL_na);
        }
        if (items > 3) {
            {
                /* %typemap(in) (double argin4[ANY]) */
                if (! (SvROK(ST(3)) && (SvTYPE(SvRV(ST(3)))==SVt_PVAV))) {
                    croak("argument is not an array ref");
                    SWIG_fail;
                }
                arg4 = argin4;
                AV *av = (AV*)(SvRV(ST(3)));
                int seq_size = av_len(av)+1;
                if ( seq_size != 17 ) {
                    croak("argument array must have length %d",17);
                    SWIG_fail;
                }
                for (unsigned int i=0; i<17; i++) {
                    SV **sv = av_fetch(av, i, 0);
                    arg4[i] =  SvNV(*sv);
                }
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ImportFromPCI(arg1,(char const *)arg2,(char const *)arg3,arg4);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ImportFromUSGS) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        long arg2 ;
        long arg3 = (long) 0 ;
        double *arg4 = (double *) (double *)0 ;
        long arg5 = (long) 0 ;
        OGRErr result;
        double argin4[15] ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 5)) {
            SWIG_croak("Usage: SpatialReference_ImportFromUSGS(self,proj_code,zone,argin,datum_code);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ImportFromUSGS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        arg2 = (long) SvIV(ST(1));
        if (items > 2) {
            arg3 = (long) SvIV(ST(2));
        }
        if (items > 3) {
            {
                /* %typemap(in) (double argin4[ANY]) */
                if (! (SvROK(ST(3)) && (SvTYPE(SvRV(ST(3)))==SVt_PVAV))) {
                    croak("argument is not an array ref");
                    SWIG_fail;
                }
                arg4 = argin4;
                AV *av = (AV*)(SvRV(ST(3)));
                int seq_size = av_len(av)+1;
                if ( seq_size != 15 ) {
                    croak("argument array must have length %d",15);
                    SWIG_fail;
                }
                for (unsigned int i=0; i<15; i++) {
                    SV **sv = av_fetch(av, i, 0);
                    arg4[i] =  SvNV(*sv);
                }
            }
        }
        if (items > 4) {
            arg5 = (long) SvIV(ST(4));
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ImportFromUSGS(arg1,arg2,arg3,arg4,arg5);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ImportFromXML) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char *arg2 = (char *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_ImportFromXML(self,xmlString);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ImportFromXML. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (!SvOK((SV*) ST(1))) arg2 = 0;
        else arg2 = (char *) SvPV(ST(1), PL_na);
        result = (OGRErr)OSRSpatialReferenceShadow_ImportFromXML(arg1,(char const *)arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ExportToWkt) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char **arg2 = (char **) 0 ;
        OGRErr result;
        char *argout2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        {
            /* %typemap(in,numinputs=0) (char **argout2) */
            arg2 = &argout2;
        }
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_ExportToWkt(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ExportToWkt. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ExportToWkt(arg1,arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        {
            /* %typemap(argout) (char **argout) */
            ST(argvi) = sv_newmortal();
            if ( arg2 )
            sv_setpv(ST(argvi), *arg2);
            argvi++;
        }
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        XSRETURN(argvi);
        fail:
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ExportToPrettyWkt) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char **arg2 = (char **) 0 ;
        int arg3 = (int) 0 ;
        OGRErr result;
        char *argout2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        {
            /* %typemap(in,numinputs=0) (char **argout2) */
            arg2 = &argout2;
        }
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_ExportToPrettyWkt(self,simplify);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ExportToPrettyWkt. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (items > 1) {
            arg3 = (int) SvIV(ST(1));
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ExportToPrettyWkt(arg1,arg2,arg3);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        {
            /* %typemap(argout) (char **argout) */
            ST(argvi) = sv_newmortal();
            if ( arg2 )
            sv_setpv(ST(argvi), *arg2);
            argvi++;
        }
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        XSRETURN(argvi);
        fail:
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ExportToProj4) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char **arg2 = (char **) 0 ;
        OGRErr result;
        char *argout2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        {
            /* %typemap(in,numinputs=0) (char **argout2) */
            arg2 = &argout2;
        }
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_ExportToProj4(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ExportToProj4. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ExportToProj4(arg1,arg2);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        {
            /* %typemap(argout) (char **argout) */
            ST(argvi) = sv_newmortal();
            if ( arg2 )
            sv_setpv(ST(argvi), *arg2);
            argvi++;
        }
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        XSRETURN(argvi);
        fail:
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ExportToPCI) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char **arg2 = (char **) 0 ;
        char **arg3 = (char **) 0 ;
        double **arg4 ;
        OGRErr result;
        char *argout2 = 0 ;
        char *argout3 = 0 ;
        double *argout4 ;
        int argvi = 0;
        dXSARGS;
        
        {
            /* %typemap(in,numinputs=0) (char **argout2) */
            arg2 = &argout2;
        }
        {
            /* %typemap(in,numinputs=0) (char **argout3) */
            arg3 = &argout3;
        }
        {
            /* %typemap(in,numinputs=0) (double *argout4[ANY]) */
            arg4 = &argout4;
        }
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_ExportToPCI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ExportToPCI. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ExportToPCI(arg1,arg2,arg3,arg4);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        {
            /* %typemap(argout) (char **argout) */
            ST(argvi) = sv_newmortal();
            if ( arg2 )
            sv_setpv(ST(argvi), *arg2);
            argvi++;
        }
        {
            /* %typemap(argout) (char **argout) */
            ST(argvi) = sv_newmortal();
            if ( arg3 )
            sv_setpv(ST(argvi), *arg3);
            argvi++;
        }
        {
            /* %typemap(argout) (double *argout[ANY]) */
            ST(argvi) = CreateArrayFromDoubleArray( *arg4, 17 );
            argvi++;
        }
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg3 )
            CPLFree( *arg3 );
        }
        {
            /* %typemap(freearg) (double *argout[ANY]) */
            CPLFree(*arg4);
        }
        XSRETURN(argvi);
        fail:
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg3 )
            CPLFree( *arg3 );
        }
        {
            /* %typemap(freearg) (double *argout[ANY]) */
            CPLFree(*arg4);
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ExportToUSGS) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        long *arg2 = (long *) 0 ;
        long *arg3 = (long *) 0 ;
        double **arg4 ;
        long *arg5 = (long *) 0 ;
        OGRErr result;
        long temp2 ;
        long temp3 ;
        double *argout4 ;
        long temp5 ;
        int argvi = 0;
        dXSARGS;
        
        arg2 = &temp2;
        arg3 = &temp3;
        {
            /* %typemap(in,numinputs=0) (double *argout4[ANY]) */
            arg4 = &argout4;
        }
        arg5 = &temp5;
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_ExportToUSGS(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ExportToUSGS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ExportToUSGS(arg1,arg2,arg3,arg4,arg5);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setiv(ST(argvi),(IV) *(arg2));
            argvi++;
        }
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setiv(ST(argvi),(IV) *(arg3));
            argvi++;
        }
        {
            /* %typemap(argout) (double *argout[ANY]) */
            ST(argvi) = CreateArrayFromDoubleArray( *arg4, 15 );
            argvi++;
        }
        {
            if (argvi >= items) {
                EXTEND(sp,1);
            }
            ST(argvi) = sv_newmortal();
            sv_setiv(ST(argvi),(IV) *(arg5));
            argvi++;
        }
        {
            /* %typemap(freearg) (double *argout[ANY]) */
            CPLFree(*arg4);
        }
        XSRETURN(argvi);
        fail:
        {
            /* %typemap(freearg) (double *argout[ANY]) */
            CPLFree(*arg4);
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_ExportToXML) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        char **arg2 = (char **) 0 ;
        char *arg3 = (char *) "" ;
        OGRErr result;
        char *argout2 = 0 ;
        int argvi = 0;
        dXSARGS;
        
        {
            /* %typemap(in,numinputs=0) (char **argout2) */
            arg2 = &argout2;
        }
        if ((items < 1) || (items > 2)) {
            SWIG_croak("Usage: SpatialReference_ExportToXML(self,dialect);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_ExportToXML. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        if (items > 1) {
            if (!SvOK((SV*) ST(1))) arg3 = 0;
            else arg3 = (char *) SvPV(ST(1), PL_na);
        }
        result = (OGRErr)OSRSpatialReferenceShadow_ExportToXML(arg1,arg2,(char const *)arg3);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        {
            /* %typemap(argout) (char **argout) */
            ST(argvi) = sv_newmortal();
            if ( arg2 )
            sv_setpv(ST(argvi), *arg2);
            argvi++;
        }
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        XSRETURN(argvi);
        fail:
        {
            /* %typemap(freearg) (char **argout) */
            if ( *arg2 )
            CPLFree( *arg2 );
        }
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_CloneGeogCS) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OSRSpatialReferenceShadow *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_CloneGeogCS(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_CloneGeogCS. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OSRSpatialReferenceShadow *)OSRSpatialReferenceShadow_CloneGeogCS(arg1);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_OSRSpatialReferenceShadow, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_Validate) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_Validate(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_Validate. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_Validate(arg1);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_StripCTParms) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_StripCTParms(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_StripCTParms. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_StripCTParms(arg1);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_FixupOrdering) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_FixupOrdering(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_FixupOrdering. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_FixupOrdering(arg1);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_Fixup) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_Fixup(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_Fixup. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_Fixup(arg1);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_MorphToESRI) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_MorphToESRI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_MorphToESRI. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_MorphToESRI(arg1);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_SpatialReference_MorphFromESRI) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OGRErr result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: SpatialReference_MorphFromESRI(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of SpatialReference_MorphFromESRI. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OGRErr)OSRSpatialReferenceShadow_MorphFromESRI(arg1);
        
        {
            /* %typemap(out) OGRErr */
            if ( result != 0 ) {
                croak( OGRErrMessages(result) );
            }
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_new_CoordinateTransformation) {
    {
        OSRSpatialReferenceShadow *arg1 = (OSRSpatialReferenceShadow *) 0 ;
        OSRSpatialReferenceShadow *arg2 = (OSRSpatialReferenceShadow *) 0 ;
        OSRCoordinateTransformationShadow *result;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: new_CoordinateTransformation(src,dst);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of new_CoordinateTransformation. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        {
            if (SWIG_ConvertPtr(ST(1), (void **) &arg2, SWIGTYPE_p_OSRSpatialReferenceShadow,0) < 0) {
                SWIG_croak("Type error in argument 2 of new_CoordinateTransformation. Expected _p_OSRSpatialReferenceShadow");
            }
        }
        result = (OSRCoordinateTransformationShadow *)new_OSRCoordinateTransformationShadow(arg1,arg2);
        
        ST(argvi) = sv_newmortal();
        SWIG_MakePtr(ST(argvi++), (void *) result, SWIGTYPE_p_OSRCoordinateTransformationShadow, SWIG_SHADOW|SWIG_OWNER);
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_delete_CoordinateTransformation) {
    {
        OSRCoordinateTransformationShadow *arg1 = (OSRCoordinateTransformationShadow *) 0 ;
        int argvi = 0;
        dXSARGS;
        
        if ((items < 1) || (items > 1)) {
            SWIG_croak("Usage: delete_CoordinateTransformation(self);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRCoordinateTransformationShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of delete_CoordinateTransformation. Expected _p_OSRCoordinateTransformationShadow");
            }
        }
        delete_OSRCoordinateTransformationShadow(arg1);
        
        
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CoordinateTransformation_TransformPoint__SWIG_0) {
    {
        OSRCoordinateTransformationShadow *arg1 = (OSRCoordinateTransformationShadow *) 0 ;
        double *arg2 ;
        double argin2[3] ;
        int argvi = 0;
        SV * _saved[1] ;
        dXSARGS;
        
        if ((items < 2) || (items > 2)) {
            SWIG_croak("Usage: CoordinateTransformation_TransformPoint(self,inout);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRCoordinateTransformationShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of CoordinateTransformation_TransformPoint. Expected _p_OSRCoordinateTransformationShadow");
            }
        }
        {
            /* %typemap(in) (double argin2[ANY]) */
            if (! (SvROK(ST(1)) && (SvTYPE(SvRV(ST(1)))==SVt_PVAV))) {
                croak("argument is not an array ref");
                SWIG_fail;
            }
            arg2 = argin2;
            AV *av = (AV*)(SvRV(ST(1)));
            int seq_size = av_len(av)+1;
            if ( seq_size != 3 ) {
                croak("argument array must have length %d",3);
                SWIG_fail;
            }
            for (unsigned int i=0; i<3; i++) {
                SV **sv = av_fetch(av, i, 0);
                arg2[i] =  SvNV(*sv);
            }
        }
        _saved[0] = ST(1);
        OSRCoordinateTransformationShadow_TransformPoint__SWIG_0(arg1,arg2);
        
        
        {
            /* %typemap(argout) (double argout[ANY]) */
            ST(argvi) = CreateArrayFromDoubleArray( arg2, 3 );
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CoordinateTransformation_TransformPoint__SWIG_1) {
    {
        OSRCoordinateTransformationShadow *arg1 = (OSRCoordinateTransformationShadow *) 0 ;
        double *arg2 ;
        double arg3 ;
        double arg4 ;
        double arg5 = (double) 0.0 ;
        double argout2[3] ;
        int argvi = 0;
        dXSARGS;
        
        {
            /* %typemap(in,numinputs=0) (double argout2[ANY]) */
            arg2 = argout2;
        }
        if ((items < 3) || (items > 4)) {
            SWIG_croak("Usage: CoordinateTransformation_TransformPoint(self,x,y,z);");
        }
        {
            if (SWIG_ConvertPtr(ST(0), (void **) &arg1, SWIGTYPE_p_OSRCoordinateTransformationShadow,0) < 0) {
                SWIG_croak("Type error in argument 1 of CoordinateTransformation_TransformPoint. Expected _p_OSRCoordinateTransformationShadow");
            }
        }
        arg3 = (double) SvNV(ST(1));
        
        arg4 = (double) SvNV(ST(2));
        
        if (items > 3) {
            arg5 = (double) SvNV(ST(3));
            
        }
        OSRCoordinateTransformationShadow_TransformPoint__SWIG_1(arg1,arg2,arg3,arg4,arg5);
        
        
        {
            /* %typemap(argout) (double argout[ANY]) */
            ST(argvi) = CreateArrayFromDoubleArray( arg2, 3 );
            argvi++;
        }
        XSRETURN(argvi);
        fail:
        ;
    }
    croak(Nullch);
}


XS(_wrap_CoordinateTransformation_TransformPoint) {
    dXSARGS;
    
    if (items == 2) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_OSRCoordinateTransformationShadow, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *tmp;
                if (SWIG_ConvertPtr(ST(1), (void **) &tmp, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CoordinateTransformation_TransformPoint__SWIG_0); return;
            }
        }
    }
    if ((items >= 3) && (items <= 4)) {
        int _v;
        {
            void *tmp;
            if (SWIG_ConvertPtr(ST(0), (void **) &tmp, SWIGTYPE_p_OSRCoordinateTransformationShadow, 0) == -1) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = SvNIOK(ST(1)) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = SvNIOK(ST(2)) ? 1 : 0;
                }
                if (_v) {
                    if (items <= 3) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CoordinateTransformation_TransformPoint__SWIG_1); return;
                    }
                    {
                        _v = SvNIOK(ST(3)) ? 1 : 0;
                    }
                    if (_v) {
                        (*PL_markstack_ptr++);SWIG_CALLXS(_wrap_CoordinateTransformation_TransformPoint__SWIG_1); return;
                    }
                }
            }
        }
    }
    
    croak("No matching function for overloaded 'CoordinateTransformation_TransformPoint'");
    XSRETURN(0);
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_OSRCoordinateTransformationShadow = {"osr::CoordinateTransformation", "OSRCoordinateTransformationShadow *", 0, 0, 0};
static swig_type_info _swigt__p_OSRSpatialReferenceShadow = {"osr::SpatialReference", "OSRSpatialReferenceShadow *", 0, 0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|OGRErr *", 0, 0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_OSRCoordinateTransformationShadow,
  &_swigt__p_OSRSpatialReferenceShadow,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_p_char,
  &_swigt__p_p_double,
};

static swig_cast_info _swigc__p_OSRCoordinateTransformationShadow[] = {  {&_swigt__p_OSRCoordinateTransformationShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OSRSpatialReferenceShadow[] = {  {&_swigt__p_OSRSpatialReferenceShadow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_OSRCoordinateTransformationShadow,
  _swigc__p_OSRSpatialReferenceShadow,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_p_char,
  _swigc__p_p_double,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_ALBERS_CONIC_EQUAL_AREA", 0, 0, (void *)"SRS_PT_ALBERS_CONIC_EQUAL_AREA", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_AZIMUTHAL_EQUIDISTANT", 0, 0, (void *)"SRS_PT_AZIMUTHAL_EQUIDISTANT", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_CASSINI_SOLDNER", 0, 0, (void *)"SRS_PT_CASSINI_SOLDNER", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_CYLINDRICAL_EQUAL_AREA", 0, 0, (void *)"SRS_PT_CYLINDRICAL_EQUAL_AREA", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_ECKERT_IV", 0, 0, (void *)"SRS_PT_ECKERT_IV", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_ECKERT_VI", 0, 0, (void *)"SRS_PT_ECKERT_VI", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_EQUIDISTANT_CONIC", 0, 0, (void *)"SRS_PT_EQUIDISTANT_CONIC", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_EQUIRECTANGULAR", 0, 0, (void *)"SRS_PT_EQUIRECTANGULAR", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_GALL_STEREOGRAPHIC", 0, 0, (void *)"SRS_PT_GALL_STEREOGRAPHIC", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_GNOMONIC", 0, 0, (void *)"SRS_PT_GNOMONIC", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_GOODE_HOMOLOSINE", 0, 0, (void *)"SRS_PT_GOODE_HOMOLOSINE", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_HOTINE_OBLIQUE_MERCATOR", 0, 0, (void *)"SRS_PT_HOTINE_OBLIQUE_MERCATOR", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_HOTINE_OBLIQUE_MERCATOR_TWO_POINT_NATURAL_ORIGIN", 0, 0, (void *)"SRS_PT_HOTINE_OBLIQUE_MERCATOR_TWO_POINT_NATURAL_ORIGIN", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_LABORDE_OBLIQUE_MERCATOR", 0, 0, (void *)"SRS_PT_LABORDE_OBLIQUE_MERCATOR", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_LAMBERT_CONFORMAL_CONIC_1SP", 0, 0, (void *)"SRS_PT_LAMBERT_CONFORMAL_CONIC_1SP", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_LAMBERT_CONFORMAL_CONIC_2SP", 0, 0, (void *)"SRS_PT_LAMBERT_CONFORMAL_CONIC_2SP", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_LAMBERT_CONFORMAL_CONIC_2SP_BELGIUM", 0, 0, (void *)"SRS_PT_LAMBERT_CONFORMAL_CONIC_2SP_BELGIUM", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_LAMBERT_AZIMUTHAL_EQUAL_AREA", 0, 0, (void *)"SRS_PT_LAMBERT_AZIMUTHAL_EQUAL_AREA", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_MERCATOR_1SP", 0, 0, (void *)"SRS_PT_MERCATOR_1SP", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_MERCATOR_2SP", 0, 0, (void *)"SRS_PT_MERCATOR_2SP", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_MILLER_CYLINDRICAL", 0, 0, (void *)"SRS_PT_MILLER_CYLINDRICAL", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_MOLLWEIDE", 0, 0, (void *)"SRS_PT_MOLLWEIDE", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_NEW_ZEALAND_MAP_GRID", 0, 0, (void *)"SRS_PT_NEW_ZEALAND_MAP_GRID", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_OBLIQUE_STEREOGRAPHIC", 0, 0, (void *)"SRS_PT_OBLIQUE_STEREOGRAPHIC", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_ORTHOGRAPHIC", 0, 0, (void *)"SRS_PT_ORTHOGRAPHIC", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_POLAR_STEREOGRAPHIC", 0, 0, (void *)"SRS_PT_POLAR_STEREOGRAPHIC", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_POLYCONIC", 0, 0, (void *)"SRS_PT_POLYCONIC", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_ROBINSON", 0, 0, (void *)"SRS_PT_ROBINSON", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_SINUSOIDAL", 0, 0, (void *)"SRS_PT_SINUSOIDAL", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_STEREOGRAPHIC", 0, 0, (void *)"SRS_PT_STEREOGRAPHIC", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_SWISS_OBLIQUE_CYLINDRICAL", 0, 0, (void *)"SRS_PT_SWISS_OBLIQUE_CYLINDRICAL", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_TRANSVERSE_MERCATOR", 0, 0, (void *)"SRS_PT_TRANSVERSE_MERCATOR", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_TRANSVERSE_MERCATOR_SOUTH_ORIENTED", 0, 0, (void *)"SRS_PT_TRANSVERSE_MERCATOR_SOUTH_ORIENTED", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_TRANSVERSE_MERCATOR_MI_22", 0, 0, (void *)"SRS_PT_TRANSVERSE_MERCATOR_MI_22", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_TRANSVERSE_MERCATOR_MI_23", 0, 0, (void *)"SRS_PT_TRANSVERSE_MERCATOR_MI_23", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_TRANSVERSE_MERCATOR_MI_24", 0, 0, (void *)"SRS_PT_TRANSVERSE_MERCATOR_MI_24", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_TRANSVERSE_MERCATOR_MI_25", 0, 0, (void *)"SRS_PT_TRANSVERSE_MERCATOR_MI_25", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_TUNISIA_MINING_GRID", 0, 0, (void *)"SRS_PT_TUNISIA_MINING_GRID", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_VANDERGRINTEN", 0, 0, (void *)"SRS_PT_VANDERGRINTEN", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PT_KROVAK", 0, 0, (void *)"SRS_PT_KROVAK", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_CENTRAL_MERIDIAN", 0, 0, (void *)"SRS_PP_CENTRAL_MERIDIAN", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_SCALE_FACTOR", 0, 0, (void *)"SRS_PP_SCALE_FACTOR", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_STANDARD_PARALLEL_1", 0, 0, (void *)"SRS_PP_STANDARD_PARALLEL_1", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_STANDARD_PARALLEL_2", 0, 0, (void *)"SRS_PP_STANDARD_PARALLEL_2", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_PSEUDO_STD_PARALLEL_1", 0, 0, (void *)"SRS_PP_PSEUDO_STD_PARALLEL_1", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LONGITUDE_OF_CENTER", 0, 0, (void *)"SRS_PP_LONGITUDE_OF_CENTER", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LATITUDE_OF_CENTER", 0, 0, (void *)"SRS_PP_LATITUDE_OF_CENTER", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LONGITUDE_OF_ORIGIN", 0, 0, (void *)"SRS_PP_LONGITUDE_OF_ORIGIN", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LATITUDE_OF_ORIGIN", 0, 0, (void *)"SRS_PP_LATITUDE_OF_ORIGIN", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_FALSE_EASTING", 0, 0, (void *)"SRS_PP_FALSE_EASTING", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_FALSE_NORTHING", 0, 0, (void *)"SRS_PP_FALSE_NORTHING", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_AZIMUTH", 0, 0, (void *)"SRS_PP_AZIMUTH", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LONGITUDE_OF_POINT_1", 0, 0, (void *)"SRS_PP_LONGITUDE_OF_POINT_1", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LATITUDE_OF_POINT_1", 0, 0, (void *)"SRS_PP_LATITUDE_OF_POINT_1", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LONGITUDE_OF_POINT_2", 0, 0, (void *)"SRS_PP_LONGITUDE_OF_POINT_2", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LATITUDE_OF_POINT_2", 0, 0, (void *)"SRS_PP_LATITUDE_OF_POINT_2", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LONGITUDE_OF_POINT_3", 0, 0, (void *)"SRS_PP_LONGITUDE_OF_POINT_3", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LATITUDE_OF_POINT_3", 0, 0, (void *)"SRS_PP_LATITUDE_OF_POINT_3", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_RECTIFIED_GRID_ANGLE", 0, 0, (void *)"SRS_PP_RECTIFIED_GRID_ANGLE", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_LANDSAT_NUMBER", 0, 0, (void *)"SRS_PP_LANDSAT_NUMBER", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_PATH_NUMBER", 0, 0, (void *)"SRS_PP_PATH_NUMBER", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_PERSPECTIVE_POINT_HEIGHT", 0, 0, (void *)"SRS_PP_PERSPECTIVE_POINT_HEIGHT", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_FIPSZONE", 0, 0, (void *)"SRS_PP_FIPSZONE", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_PP_ZONE", 0, 0, (void *)"SRS_PP_ZONE", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_METER", 0, 0, (void *)"SRS_UL_METER", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_FOOT", 0, 0, (void *)"SRS_UL_FOOT", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_FOOT_CONV", 0, 0, (void *)"SRS_UL_FOOT_CONV", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_US_FOOT", 0, 0, (void *)"SRS_UL_US_FOOT", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_US_FOOT_CONV", 0, 0, (void *)"SRS_UL_US_FOOT_CONV", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_NAUTICAL_MILE", 0, 0, (void *)"SRS_UL_NAUTICAL_MILE", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_NAUTICAL_MILE_CONV", 0, 0, (void *)"SRS_UL_NAUTICAL_MILE_CONV", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_LINK", 0, 0, (void *)"SRS_UL_LINK", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_LINK_CONV", 0, 0, (void *)"SRS_UL_LINK_CONV", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_CHAIN", 0, 0, (void *)"SRS_UL_CHAIN", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_CHAIN_CONV", 0, 0, (void *)"SRS_UL_CHAIN_CONV", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_ROD", 0, 0, (void *)"SRS_UL_ROD", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_UL_ROD_CONV", 0, 0, (void *)"SRS_UL_ROD_CONV", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_DN_NAD27", 0, 0, (void *)"SRS_DN_NAD27", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_DN_NAD83", 0, 0, (void *)"SRS_DN_NAD83", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_DN_WGS72", 0, 0, (void *)"SRS_DN_WGS72", 0},
{ SWIG_STRING,  (char *) SWIG_prefix "SRS_DN_WGS84", 0, 0, (void *)"SRS_DN_WGS84", 0},
{ SWIG_FLOAT,   (char *) SWIG_prefix "SRS_WGS84_SEMIMAJOR", 0, (double) SRS_WGS84_SEMIMAJOR, 0, 0},
{ SWIG_FLOAT,   (char *) SWIG_prefix "SRS_WGS84_INVFLATTENING", 0, (double) SRS_WGS84_INVFLATTENING, 0, 0},
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"osrc::GetWellKnownGeogCSAsWKT", _wrap_GetWellKnownGeogCSAsWKT},
{"osrc::GetProjectionMethods", _wrap_GetProjectionMethods},
{"osrc::GetProjectionMethodParameterList", _wrap_GetProjectionMethodParameterList},
{"osrc::GetProjectionMethodParamInfo", _wrap_GetProjectionMethodParamInfo},
{"osrc::new_SpatialReference", _wrap_new_SpatialReference},
{"osrc::delete_SpatialReference", _wrap_delete_SpatialReference},
{"osrc::SpatialReference___str__", _wrap_SpatialReference___str__},
{"osrc::SpatialReference_IsSame", _wrap_SpatialReference_IsSame},
{"osrc::SpatialReference_IsSameGeogCS", _wrap_SpatialReference_IsSameGeogCS},
{"osrc::SpatialReference_IsGeographic", _wrap_SpatialReference_IsGeographic},
{"osrc::SpatialReference_IsProjected", _wrap_SpatialReference_IsProjected},
{"osrc::SpatialReference_GetAttrValue", _wrap_SpatialReference_GetAttrValue},
{"osrc::SpatialReference_SetAttrValue", _wrap_SpatialReference_SetAttrValue},
{"osrc::SpatialReference_SetAngularUnits", _wrap_SpatialReference_SetAngularUnits},
{"osrc::SpatialReference_GetAngularUnits", _wrap_SpatialReference_GetAngularUnits},
{"osrc::SpatialReference_SetLinearUnits", _wrap_SpatialReference_SetLinearUnits},
{"osrc::SpatialReference_GetLinearUnits", _wrap_SpatialReference_GetLinearUnits},
{"osrc::SpatialReference_GetLinearUnitsName", _wrap_SpatialReference_GetLinearUnitsName},
{"osrc::SpatialReference_GetAuthorityCode", _wrap_SpatialReference_GetAuthorityCode},
{"osrc::SpatialReference_GetAuthorityName", _wrap_SpatialReference_GetAuthorityName},
{"osrc::SpatialReference_SetUTM", _wrap_SpatialReference_SetUTM},
{"osrc::SpatialReference_SetStatePlane", _wrap_SpatialReference_SetStatePlane},
{"osrc::SpatialReference_AutoIdentifyEPSG", _wrap_SpatialReference_AutoIdentifyEPSG},
{"osrc::SpatialReference_SetProjection", _wrap_SpatialReference_SetProjection},
{"osrc::SpatialReference_SetProjParm", _wrap_SpatialReference_SetProjParm},
{"osrc::SpatialReference_GetProjParm", _wrap_SpatialReference_GetProjParm},
{"osrc::SpatialReference_SetNormProjParm", _wrap_SpatialReference_SetNormProjParm},
{"osrc::SpatialReference_GetNormProjParm", _wrap_SpatialReference_GetNormProjParm},
{"osrc::SpatialReference_SetACEA", _wrap_SpatialReference_SetACEA},
{"osrc::SpatialReference_SetAE", _wrap_SpatialReference_SetAE},
{"osrc::SpatialReference_SetCS", _wrap_SpatialReference_SetCS},
{"osrc::SpatialReference_SetBonne", _wrap_SpatialReference_SetBonne},
{"osrc::SpatialReference_SetEC", _wrap_SpatialReference_SetEC},
{"osrc::SpatialReference_SetEckertIV", _wrap_SpatialReference_SetEckertIV},
{"osrc::SpatialReference_SetEckertVI", _wrap_SpatialReference_SetEckertVI},
{"osrc::SpatialReference_SetEquirectangular", _wrap_SpatialReference_SetEquirectangular},
{"osrc::SpatialReference_SetGS", _wrap_SpatialReference_SetGS},
{"osrc::SpatialReference_SetWellKnownGeogCS", _wrap_SpatialReference_SetWellKnownGeogCS},
{"osrc::SpatialReference_SetFromUserInput", _wrap_SpatialReference_SetFromUserInput},
{"osrc::SpatialReference_CopyGeogCSFrom", _wrap_SpatialReference_CopyGeogCSFrom},
{"osrc::SpatialReference_SetTOWGS84", _wrap_SpatialReference_SetTOWGS84},
{"osrc::SpatialReference_GetTOWGS84", _wrap_SpatialReference_GetTOWGS84},
{"osrc::SpatialReference_SetGeogCS", _wrap_SpatialReference_SetGeogCS},
{"osrc::SpatialReference_SetProjCS", _wrap_SpatialReference_SetProjCS},
{"osrc::SpatialReference_ImportFromWkt", _wrap_SpatialReference_ImportFromWkt},
{"osrc::SpatialReference_ImportFromProj4", _wrap_SpatialReference_ImportFromProj4},
{"osrc::SpatialReference_ImportFromESRI", _wrap_SpatialReference_ImportFromESRI},
{"osrc::SpatialReference_ImportFromEPSG", _wrap_SpatialReference_ImportFromEPSG},
{"osrc::SpatialReference_ImportFromPCI", _wrap_SpatialReference_ImportFromPCI},
{"osrc::SpatialReference_ImportFromUSGS", _wrap_SpatialReference_ImportFromUSGS},
{"osrc::SpatialReference_ImportFromXML", _wrap_SpatialReference_ImportFromXML},
{"osrc::SpatialReference_ExportToWkt", _wrap_SpatialReference_ExportToWkt},
{"osrc::SpatialReference_ExportToPrettyWkt", _wrap_SpatialReference_ExportToPrettyWkt},
{"osrc::SpatialReference_ExportToProj4", _wrap_SpatialReference_ExportToProj4},
{"osrc::SpatialReference_ExportToPCI", _wrap_SpatialReference_ExportToPCI},
{"osrc::SpatialReference_ExportToUSGS", _wrap_SpatialReference_ExportToUSGS},
{"osrc::SpatialReference_ExportToXML", _wrap_SpatialReference_ExportToXML},
{"osrc::SpatialReference_CloneGeogCS", _wrap_SpatialReference_CloneGeogCS},
{"osrc::SpatialReference_Validate", _wrap_SpatialReference_Validate},
{"osrc::SpatialReference_StripCTParms", _wrap_SpatialReference_StripCTParms},
{"osrc::SpatialReference_FixupOrdering", _wrap_SpatialReference_FixupOrdering},
{"osrc::SpatialReference_Fixup", _wrap_SpatialReference_Fixup},
{"osrc::SpatialReference_MorphToESRI", _wrap_SpatialReference_MorphToESRI},
{"osrc::SpatialReference_MorphFromESRI", _wrap_SpatialReference_MorphFromESRI},
{"osrc::new_CoordinateTransformation", _wrap_new_CoordinateTransformation},
{"osrc::delete_CoordinateTransformation", _wrap_delete_CoordinateTransformation},
{"osrc::CoordinateTransformation_TransformPoint", _wrap_CoordinateTransformation_TransformPoint},
{0,0}
};
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
        swig_module.types[i] = 0;
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C"
#endif

XS(SWIG_init) {
    dXSARGS;
    int i;
    
    SWIG_InitializeModule(0);
    
    /* Install commands */
    for (i = 0; swig_commands[i].name; i++) {
        newXS((char*) swig_commands[i].name,swig_commands[i].wrapper, (char*)__FILE__);
    }
    
    /* Install variables */
    for (i = 0; swig_variables[i].name; i++) {
        SV *sv;
        sv = perl_get_sv((char*) swig_variables[i].name, TRUE | 0x2);
        if (swig_variables[i].type) {
            SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
        } else {
            sv_setiv(sv,(IV) 0);
        }
        swig_create_magic(sv, (char *) swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
    }
    
    /* Install constant */
    for (i = 0; swig_constants[i].type; i++) {
        SV *sv;
        sv = perl_get_sv((char*)swig_constants[i].name, TRUE | 0x2);
        switch(swig_constants[i].type) {
            case SWIG_INT:
            sv_setiv(sv, (IV) swig_constants[i].lvalue);
            break;
            case SWIG_FLOAT:
            sv_setnv(sv, (double) swig_constants[i].dvalue);
            break;
            case SWIG_STRING:
            sv_setpv(sv, (char *) swig_constants[i].pvalue);
            break;
            case SWIG_POINTER:
            SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
            break;
            case SWIG_BINARY:
            SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
            break;
            default:
            break;
        }
        SvREADONLY_on(sv);
    }
    
    SWIG_TypeClientData(SWIGTYPE_p_OSRSpatialReferenceShadow, (void*) "osr::SpatialReference");
    SWIG_TypeClientData(SWIGTYPE_p_OSRCoordinateTransformationShadow, (void*) "osr::CoordinateTransformation");
    ST(0) = &PL_sv_yes;
    XSRETURN(1);
}

