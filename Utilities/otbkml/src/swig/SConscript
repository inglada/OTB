# Copyright 2008, Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of Google Inc. nor the names of its contributors may be
#     used to endorse or promote products derived from this software without
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import subprocess

Import('env')
env = env.Clone()

# TODO: This duplicates some settings in src/SConscript, but we are choosing
# to not inflict any strange issues such as failure to compile with
# -pendantic upon the main code base.

env.Append(CPPPATH=['#/src',
                    '#/third_party/expat-2.0.1/lib'])
env.Append(LIBPATH=['#/build',
                    '#/build/kml/dom'])

if env['PLATFORM'] == 'win32':
  # TODO: debug flags
  env.Append(CXXFLAGS=['/EHsc','/MD'])
  env.Append(ENV={'PATH':os.environ['PATH']})

env.Append(LIBS=['kmldom','expat'])
env.Append(SWIGFLAGS=['-c++', '-Isrc'])

# Checks to see which languages are SWIG-able. We use os.devnull to suppress
# the printing of the result of the command.
def LanguageExists(lang, version_flag):
  try:
    ret = subprocess.Popen([lang, version_flag],
                           stdout = open(os.devnull, 'w'),
                           stderr = subprocess.STDOUT)
  except OSError:
    ret = None
  return ret

# We call SWIG if we can see that the language is installed.
# TODO: ensure this works equivalently across all supported platforms.
if LanguageExists('python', '-V'):
  SConscript('SConscript.python', exports='env', build_dir='#/build/python',
             duplicate=0)

if LanguageExists('javac', '-version'):
  # Note that we check for the existance of the compiler. SWIG requires that
  # the SDK is installed, not merely the runtime.
  SConscript('SConscript.java', exports='env', build_dir='#/build/java',
             duplicate=0)

if LanguageExists('ruby', '--version'):
  SConscript('SConscript.ruby', exports='env', build_dir='#/build/ruby',
             duplicate=0)

if LanguageExists('php', '--version'):
  SConscript('SConscript.php', exports='env', build_dir='#/build/php',
             duplicate=0)

if LanguageExists('perl', '--version'):
  SConscript('SConscript.perl', exports='env', build_dir='#/build/perl',
             duplicate=0)

