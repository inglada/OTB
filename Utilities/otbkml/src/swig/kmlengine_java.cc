/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.35
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "kml/dom.h"
#include "kml/engine.h"


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_kmlengineJNI_new_1Bbox_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  kmlengine::Bbox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (kmlengine::Bbox *)new kmlengine::Bbox();
  *(kmlengine::Bbox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kmlengineJNI_new_1Bbox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  kmlengine::Bbox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (kmlengine::Bbox *)new kmlengine::Bbox(arg1,arg2,arg3,arg4);
  *(kmlengine::Bbox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kmlengineJNI_Bbox_1Contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  kmlengine::Bbox *arg1 = (kmlengine::Bbox *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlengine::Bbox **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)((kmlengine::Bbox const *)arg1)->Contains(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kmlengineJNI_Bbox_1ExpandLatitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmlengine::Bbox *arg1 = (kmlengine::Bbox *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlengine::Bbox **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->ExpandLatitude(arg2);
}


SWIGEXPORT void JNICALL Java_kmlengineJNI_Bbox_1ExpandLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  kmlengine::Bbox *arg1 = (kmlengine::Bbox *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlengine::Bbox **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->ExpandLongitude(arg2);
}


SWIGEXPORT void JNICALL Java_kmlengineJNI_delete_1Bbox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlengine::Bbox *arg1 = (kmlengine::Bbox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmlengine::Bbox **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_kmlengineJNI_Clone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::Element > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmldom::ElementPtr **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kmldom::ElementPtr const & reference is null");
    return 0;
  } 
  result = kmlengine::Clone((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::ElementPtr **)&jresult = new kmldom::ElementPtr((kmldom::ElementPtr &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kmlengineJNI_GetFeatureLatLon(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  kmldom::FeaturePtr *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmldom::FeaturePtr **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kmldom::FeaturePtr const & reference is null");
    return 0;
  } 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  result = (bool)kmlengine::GetFeatureLatLon((boost::intrusive_ptr< kmldom::Feature > const &)*arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kmlengineJNI_GetRootFeature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  kmldom::ElementPtr *arg1 = 0 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::Feature > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmldom::ElementPtr **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "kmldom::ElementPtr const & reference is null");
    return 0;
  } 
  result = kmlengine::GetRootFeature((boost::intrusive_ptr< kmldom::Element > const &)*arg1);
  *(kmldom::FeaturePtr **)&jresult = new kmldom::FeaturePtr((kmldom::FeaturePtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kmlengineJNI_KmlFile_1CreateFromParse(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = (std::string *) 0 ;
  kmlengine::KmlFile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2; 
  result = (kmlengine::KmlFile *)kmlengine::KmlFile::CreateFromParse((std::string const &)*arg1,arg2);
  *(kmlengine::KmlFile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kmlengineJNI_KmlFile_1root(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  kmlengine::KmlFile *arg1 = (kmlengine::KmlFile *) 0 ;
  kmldom::ElementPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlengine::KmlFile **)&jarg1; 
  {
    kmldom::ElementPtr const &_result_ref = ((kmlengine::KmlFile const *)arg1)->root();
    result = (kmldom::ElementPtr *) &_result_ref;
  }
  *(kmldom::ElementPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_kmlengineJNI_KmlFile_1GetObjectById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  kmlengine::KmlFile *arg1 = (kmlengine::KmlFile *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< boost::intrusive_ptr< kmldom::Object > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(kmlengine::KmlFile **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((kmlengine::KmlFile const *)arg1)->GetObjectById((std::string const &)*arg2);
  *(kmldom::ObjectPtr **)&jresult = new kmldom::ObjectPtr((kmldom::ObjectPtr &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_kmlengineJNI_delete_1KmlFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  kmlengine::KmlFile *arg1 = (kmlengine::KmlFile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(kmlengine::KmlFile **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_kmlengineJNI_KmzSplit(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = (std::string *) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  result = (bool)kmlengine::KmzSplit((std::string const &)*arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_kmlengineJNI_SplitUri(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = (std::string *) 0 ;
  std::string *arg3 = (std::string *) 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string *arg5 = (std::string *) 0 ;
  std::string *arg6 = (std::string *) 0 ;
  std::string *arg7 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(std::string **)&jarg5; 
  arg6 = *(std::string **)&jarg6; 
  arg7 = *(std::string **)&jarg7; 
  result = (bool)kmlengine::SplitUri((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

