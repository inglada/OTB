# data file for the Fltk User Interface Designer (fluid)
version 1.0011 
header_name {.h} 
code_name {.cxx} 
gridx 5 
gridy 5 
snap 3
class RegularStepGradientDescentGUI {open
} {
  Function {RegularStepGradientDescentGUI()} {} {
    Fl_Window controlPanel {open
      xywh {766 66 248 273} visible
    } {
      Fl_Value_Input minimumStepLengthValuator {
        label {Minimum Step : }
        callback {SetMinimumStepLength( o->value() );}
        xywh {165 25 65 25} value 0.01
      }
      Fl_Value_Input maximumStepLengthValuator {
        label {Maximum Step : }
        callback {SetMaximumStepLength( o->value() );}
        xywh {165 52 65 25} value 1
      }
      Fl_Value_Input gradientMagnitudeToleranceValuator {
        label {Gradient Tolerance : }
        callback {SetGradientMagnitudeTolerance( o->value() );}
        xywh {165 79 65 25} value 1
      }
      Fl_Counter maximumNumberOfIterationsCounter {
        label {Max. Iterations :}
        callback {SetMaximumNumberOfIterations( (unsigned long) o->value() );}
        xywh {130 109 102 25} align 4 minimum 1 maximum 10000 step 1 value 20
        code0 {o->lstep(10);}
      }
      Fl_Button {} {
        label Start
        callback {StartOptimization();}
        xywh {25 160 65 25}
      }
      Fl_Button {} {
        label Stop
        callback {StopOptimization();}
        xywh {98 160 65 25}
      }
      Fl_Button {} {
        label Resume
        callback {ResumeOptimization();}
        xywh {170 160 65 25}
      }
      Fl_Button {} {
        label Close
        callback {controlPanel->hide();}
        xywh {85 230 85 25}
      }
    }
  }
  Function {~RegularStepGradientDescentGUI()} {return_type virtual
  } {}
  Function {SetMaximumStepLength( double )} {return_type {virtual void}
  } {}
  Function {SetMinimumStepLength( double )} {return_type {virtual void}
  } {}
  Function {SetGradientMagnitudeTolerance( double )} {return_type {virtual void}
  } {}
  Function {SetMaximumNumberOfIterations( double )} {return_type {virtual void}
  } {}
  Function {StartOptimization(void)} {return_type {virtual void}
  } {}
  Function {StopOptimization(void)} {return_type {virtual void}
  } {}
  Function {ResumeOptimization(void)} {return_type {virtual void}
  } {}
  Function {Hide(void)} {return_type {virtual void}
  } {
    code {controlPanel->hide();} {}
  }
  Function {Show(void)} {return_type {virtual void}
  } {
    code {controlPanel->show();} {selected
    }
  }
} 
